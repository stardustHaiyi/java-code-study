public class self_homework78 {
    public static void main(String[] args){
        // 二维数组
        // 二维数组的初始化方式
        // 当我们需要把数据分组管理的时候，就需要用到二维数组

        /*
        * 1.静态初始化
        *   格式：数据类型[][] 数组名 = new 数据类型[][]{{元素1，元素2}，{元素1，元素2}};
        *   范例：int[][] arr = new int[][]{{11,22},{33,44}};
        *   简化格式：数据类型[][] 数组名 = {{元素1，元素2}，{元素1，元素2}};
        *   范例：int[][] arr = {{11,22},{33,44}};
        *   范例：int arr[][] = {{11,22},{33,44}};
        *
        * 2.动态初始化
        *   格式：数据类型[][] 数组名 = new 数据类型[m][n];
        *   m表示：这个二维数组，可以存放多少个一维数组
        *   n表示：每一个一维数组，可以存放多少个元素
        *   范例：int[][] arr = new int[2][3];
        *   该数组可以存放2个一维数组，每一个一维数组中可以存放3个int类型的元素 */




        // 1.一维数组的静态初始化
        // 格式：数据类型[][] 数组名 = new 数据类型[][]{{元素1，元素2}，{元素1，元素2}};
        int[][] arr = new int[][]{{1,2,3},{4,5,6,7,8}};  // 二维数组里面装的是一维数组
        int[][] arr1 = {{1,2,3},{4,5,6,7,8,9}};
        int[][] arr2 = {
                {1,2,3,4},
                {5,6,7,8,9}
        };   // 一般我们定义二维数组会分行写，这样便于阅读
        // 注意：每一个一维数组其实是二维数组中的元素，所以每一个一维数组之间需要用逗号隔开,
        // 最后一个一维数组后面不需要加逗号


        // 2.获取元素
        System.out.println(arr2[0]);  // [I@723279cf
        // 表示获取二维数组中的第一个一维数组

        // arr2[0]:二维数组中的第一个一维数组
        // arr2[0][0]:获取第一个一维数组中的0索引的元素
        System.out.println(arr2[0][0]);  // 1
        System.out.println(arr2[1][4]);  // 9
        System.out.println("-------------------------------------");


        // 3.遍历二维数组
        // 外循环：遍历二维数组，得到里面的每一个一维数组
        for (int i = 0; i < arr2.length; i++) {
            // i 表示二维数组中的每一个索引
            // arr2[i] 表示二维数组中的每一个元素（一维数组）

            // 内循环：遍历一维数组，得到里面的每一个元素
            for (int j = 0; j < arr2[i].length; j++) {
                // j 表示一维数组中的每一个元素
                System.out.print(arr2[i][j] + " ");
            }
            System.out.println();  // 可以将每一个一维数组单独占一行
        }

        System.out.println("----------------------上面为静态初始化-----------------------");




        // 1.利用动态初始化格式创建二维数组
        // 3表示：二维数组长度为3，可以装3个一维数组
        // 5表示：每一个一维数组的长度都是5，可以装5个int类型的元素
        int[][] arr3 = new int[3][5];

        // 给二维数组赋值一个元素
        arr3[0][0] = 10;

        // 遍历二维数组
        // 外循环：遍历二维数组获取里面的每一个一维数组
        // 内循环：遍历一维数组获取每一个元素
        for (int i = 0; i < arr3.length; i++) {
            for (int j = 0; j < arr3[i].length; j++) {
                System.out.print(arr3[i][j] + " ");
            }
            System.out.println();   // 没有赋值的话，默认为0
            
        }
        System.out.println("-----------------------------------");



        // 第一种特殊情况的写法
        /*
        int[][] arr5 = new int[2][];
        int[] arr8 = {11,22};
        int[] arr9 = {44,55,66};
        arr5[0] = arr8;
        arr5[1] = arr9;
        */

        // 第二种特殊情况的写法
        /*int[][] arr5 = new int[2][3];
        int[] arr8 = {11,22};
        int[] arr9 = {44,55,66};
        arr5[0] = arr8;
        arr5[1] = arr9;    // 会把系统自动创建的地址覆盖，变成arr8和arr9的地址*/

    }
}
